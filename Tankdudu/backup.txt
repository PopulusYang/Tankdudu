此文档用于储存各种被弃用的函数和类


/*
int ColliderDectect(const ColliderBox& box1, const ColliderBox& box2) // AABB - AABB collision
{
	int jug = 0;//此为返回值
	// x轴方向碰撞？
	bool collisionX = box1.mx + box1.width >= box2.mx &&
		box2.mx + box2.width >= box1.mx;
	// y轴方向碰撞？
	bool collisionY = box1.my + box1.height >= box2.my &&
		box2.my + box2.height >= box1.my;
	// 只有两个轴向都有碰撞时才碰撞
	return collisionX && collisionY;
}

void starting()
{
	// 绘图窗口初始化
	//为了方便调试，我把控制台打开，完成后关掉即可

	initgraph(640, 480, EX_SHOWCONSOLE);
	// 获得窗口句柄
	HWND hWnd = GetHWnd();
	// 使用 Windows API 修改窗口名称
	SetWindowText(hWnd, "坦克大战");
	//设置图标
	HICON newIcon = (HICON)LoadImage(NULL, TEXT("sorce/tankico.ico"), IMAGE_ICON, 0, 0, LR_LOADFROMFILE);
	SendMessage(hWnd, WM_SETICON, ICON_BIG, (LPARAM)newIcon);
	SendMessage(hWnd, WM_SETICON, ICON_SMALL, (LPARAM)newIcon);

	IMAGE img;
	loadimage(&img, "sorce/start.jpg", 640, 480, true);
	putimage(0, 0, &img);
	//展示标题
	setbkmode(TRANSPARENT);
	RECT* title = new RECT{ 180,80,455,140 };
	settextcolor(BLACK);
	settextstyle(44, 0, "华文隶书");
	//输出标题
	drawtext("坦克大战biubiu", title, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
	delete(title);
	//分割线
	setlinecolor(BLACK);
	line(140, 160, 500, 160);
	//三个按钮
	settextstyle(24, 0, "华文隶书");
}

/*
PROMISE of
allbox distrub:
[0]:player
[1]-[n]:OBS
[n+1]:enemies
 (ensure dynamic space for enemy generating)
*/



//检测是否碰撞,只需传入两个对象的碰撞箱对象，即可检测是否碰撞
/*bool ColliderDectect(const ColliderBox& box1, const ColliderBox& box2) {
	if (!((box1.mx > box2.mx + box2.width) &&//右边
		(box1.mx + box1.width < box2.mx) &&//左边
		(box1.my > box2.my + box2.height) &&//下边
		(box1.my + box1.height < box2.my))//上边
		)
	{
		return true;
	};
	return false;
}*/
/*
//if collider, return true
int ColliderDectect(const ColliderBox& box1, const ColliderBox& box2)
{
	int jug = 0;
	if (box1.mx >= box2.mx && box1.mx <= box2.mx + box2.width && box1.my >= box2.my && box1.my <= box2.my + box2.height)//左下
		jug += 1;
	if (box1.mx >= box2.mx && box1.mx <= box2.mx + box2.width && box1.my + box1.height >= box2.my && box1.my + box1.height <= box2.my + box2.height)//左上
		jug += 2;
	if (box1.mx + box1.width >= box2.mx && box1.mx + box1.width <= box2.mx + box2.width && box1.my >= box2.my && box1.my <= box2.my + box2.height)//右下
		jug += 4;
	if (box1.mx + box1.width >= box2.mx && box1.mx + box1.width <= box2.mx + box2.width && box1.my + box1.height >= box2.my && box1.my + box1.height <= box2.my + box2.height)//右上
		jug += 8;
	return jug;
}
*/

/*
int dustiColliderDectect(const ColliderBox& box1, const ColliderBox& box2) // AABB - AABB collision
{
	int jug = 0;//此为返回值
	// x轴方向碰撞？
	bool collisionX = box1.mx + box1.width >= box2.mx &&
		box2.mx + box2.width >= box1.mx;
	// y轴方向碰撞？
	bool collisionY = box1.my + box1.height >= box2.my &&
		box2.my + box2.height >= box1.my;
	// 只有两个轴向都有碰撞时才碰撞
	return collisionX && collisionY;
}
int dustiiColliderDectect(const ColliderBox& box1, const ColliderBox& box2)
{

		// 检测本BOX的右边是否与别的碰撞箱发生碰撞
		if (box1.mx + box1.width > box2.mx && box1.mx < box2.mx &&
			(box1.my > box2.my - box2.height && box1.my - box1.height < box2.my)) {
			return 114;
		}
		// 检测本BOX的左边是否与别的碰撞箱发生碰撞
		 if (box1.mx < box2.mx + box2.width && box1.mx > box2.mx &&
			(box1.my > box2.my -box2.height &&box1.my - box1.height <box2.my)) {
			return 514;
		}
		// 检测本BOX的上边是否与别的碰撞箱发生碰撞
		 if (box1.my < box2.my + box2.height && box1.my + box1.height > box2.my&&
			 (box1.mx < box2.mx + box2.width && box1.mx + box1.width > box2.mx))
		 {
			return 191;
		}
		// 检测本BOX的下边是否与别的碰撞箱发生碰撞
		 if (box1.my -box1.height< box2.my &&
			 (box1.mx < box2.mx + box2.width && box1.mx + box1.width > box2.mx))
		 {
			return 810;
		 }

	return 0;
}*/


//tankclass.h
	//子弹检测可以改的和上面那个一样，或者直接合并
	/*static int bull_PLAdec(bullet& thisbull) //子弹专属人物碰撞检测,写这个主要是保险，后续可以合并简化，Collider==ture
	{
		int jug = -1;
		for (int i = 0; i <2; i++)
		{
			if (thisbull.getx() >= allbox[i].mx+allbox[i].displaceX &&
				thisbull.getx() < allbox[i].mx + allbox[i].width &&
				thisbull.gety() >= allbox[i].my+allbox[i].displaceY &&
				thisbull.gety() < allbox[i].my + allbox[i].height)
			{
				jug = allbox[i].ID+;
				break;
			}
		}
		return jug;
	} */

	/*class Entity : public ColliderBox//继承了碰撞箱的属性
{
protected:
	int mhealth;//健康值/血量
	//位置
	double speed;
	bool IsAlive;
	ColliderBox mybox;
	Vec vec;
public:
	//默认构造函数
	Entity() :mhealth(MAXHEALTH), speed(0), IsAlive(true) {};
	//x坐标，y坐标，宽度，高度，速度，生命值
	Entity(int x, int y, int w, int h, int s, int health, Vec vec) :mhealth(health), ColliderBox(x, y, h, w), speed(s), IsAlive(true), vec(vec) //mybox没用
	{

	};
	Entity(int x, int y, int w, int h, int s, int health) :mhealth(health), ColliderBox(x, y, h, w), speed(s), IsAlive(true) {};

	virtual ~Entity() {}
	virtual void Dead() = 0;//死亡
	virtual void Move(int) = 0;//移动
};*/